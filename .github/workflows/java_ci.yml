name: Java CI Workflow

on:
  workflow_call:
    inputs:
      project:
        description: 'Project name'
        required: true
        type: string
      java_version:
        description: 'Java version'
        required: false
        type: string
        default: '21'
      java_distribution:
        description: 'Java distribution'
        required: false
        type: string
        default: 'corretto'
      run_code_analysis:
        description: 'Run Code Analysis'
        required: false
        type: boolean
        default: true
      docker_username:
        description: 'Secret Docker Username'
        required: true
        type: string
      docker_password:
        description: 'Secret Docker Password'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ inputs.java_version }} - ${{ inputs.java_distribution }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}
          cache: maven

      - name: Validate Branch
        run: |
          current_branch=$(echo "${GITHUB_REF#refs/heads/}")
          echo $current_branch
          if [[ "$current_branch" != "master" && "$current_branch" != "main" && ! "$current_branch" =~ ^(f/|feature/|hotfix/) ]]; then
            echo "Error: Invalid branch name. Branch names must start with 'f/', 'feature/', or 'hotfix/'."
            exit 1
          fi
        shell: bash

      - name: Build
        run: mvn clean install -DskipTests

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ inputs.java_version }} - ${{ inputs.java_distribution }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}
          cache: maven

      - name: Unit Tests with Coverage
        run: mvn -B org.jacoco:jacoco-maven-plugin:0.8.11:prepare-agent test org.apache.maven.plugins:maven-surefire-report-plugin:3.2.5:report org.jacoco:jacoco-maven-plugin:0.8.11:report

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ needs.run_code_analysis.outputs.code_analysis_enabled == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 21 - corretto
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}
          cache: maven

      - name: SonarCloud Code Analysis
        id: sonar_analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=${{ secrets.SONAR_ORG_KEY }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.projectName=${{ github.event.repository.name }}

      - name: Log Analysis Skipped
        if: ${{ needs.run_code_analysis.outputs.code_analysis_enabled == 'false' }}
        run: echo "Code analysis was skipped."

  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          image_name="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.project }}"
          docker build -f docker/Dockerfile -t $image_name:latest .
          docker push $image_name:latest
