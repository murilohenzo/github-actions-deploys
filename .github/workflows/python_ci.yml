name: Python CI Workflow

on:
  workflow_call:
    inputs:
      project:
        description: 'Project name'
        required: true
        type: string
      python_version:
        description: 'Python version'
        required: false
        type: string
        default: '3.12.2'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
          architecture: 'x64'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Validate Branch
        run: |
          current_branch=$(echo "${GITHUB_REF#refs/heads/}")
          echo $current_branch
          if [[ "$current_branch" != "master" && "$current_branch" != "main" && ! "$current_branch" =~ ^(f/|feature/|hotfix/) ]]; then
            echo "Error: Invalid branch name. Branch names must start with 'f/', 'feature/', or 'hotfix/'."
            exit 1
          fi
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify installed dependencies
        run: pip freeze

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
          architecture: 'x64'

      - name: Unit Tests
        run: |
          pytest -v --cov --cov-report=xml --cov-report=html

      - name: Code Analysis
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=${{ vars.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ inputs.project }}

  docker-build:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          image_name="${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.project }}"
          docker build -f docker/Dockerfile -t $image_name:latest .
          docker push $image_name:latest
