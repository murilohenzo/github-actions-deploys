name: Workflow Python
run-name: Build ${{ github.run_number }}

on:
  push:
    branches: [ "master", "main", "feature/*", "f/*", "hotfix/*" ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "master", "main" ]

concurrency: pipeline
env:
  PYTHON_VERSION: '3.12.2'
  WORKING_DIRECTORY: '.'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Validate Branch
        run: |
          current_branch=$(echo "${GITHUB_REF#refs/heads/}")
          echo $current_branch
          if [[ "$current_branch" != "master" && "$current_branch" != "main" && ! "$current_branch" =~ ^(f/|feature/|hotfix/) ]]; then
            echo "Error: Invalid branch name. Branch names must start with 'f/', 'feature/', or 'hotfix/'."
            exit 1
          fi
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Verify installed dependencies
        run: pip freeze
        working-directory: ${{ env.WORKING_DIRECTORY }}

  unit-tests:
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Unit Tests
        run: |
          pytest -v --cov --cov-report=xml --cov-report=html
        working-directory: ${{ env.WORKING_DIRECTORY }}

  code-analysis:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    steps:
      - name: Code Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ vars.SONAR_ORG_KEY }}
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ github.event.repository.name }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests, code-analysis]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Python app
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/python-app:latest
